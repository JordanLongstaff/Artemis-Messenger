package com.walkertribe.ian.iface;

import java.util.Collections;
import java.util.List;

import com.walkertribe.ian.protocol.ArtemisPacket;
import com.walkertribe.ian.protocol.ArtemisPacketException;
import com.walkertribe.ian.protocol.core.world.ObjectUpdatePacket;
import com.walkertribe.ian.world.ArtemisObject;

/**
 * Object which reports the results of a packet parsing attempt.
 * @author rjwut
 */
public class ParseResult {
	private ArtemisPacket packet;
	private List<ListenerMethod> interestedPacketListeners = Collections.emptyList();
	private List<ListenerMethod> interestedObjectListeners = Collections.emptyList();
	private ArtemisPacketException exception;

	ParseResult() {
		// make constructor accessible only to the package
	}

	/**
	 * Returns the packet object generated by the parse attempt.
	 */
	public ArtemisPacket getPacket() {
		if (packet == null) packet = exception.toUnknownPacket();
		return packet;
	}

	/**
	 * Sets the packet object generated by the parse attempt.
	 */
	void setPacket(ArtemisPacket packet) {
		this.packet = packet;
	}

	/**
	 * Adds ListenerMethod that are interested in the packet.
	 */
	void setPacketListeners(List<ListenerMethod> listeners) {
		interestedPacketListeners = listeners;
	}

	/**
	 * Adds ListenerMethod that are interested in the objects in the packet.
	 * (Applies only to ObjectUpdatePackets.)
	 */
	void setObjectListeners(List<ListenerMethod> listeners) {
		interestedObjectListeners = listeners;
	}
	
	/**
	 * Return any exception that occurred while parsing the packet. This is
	 * only for non-fatal exception. A fatal exception (one occurring before
	 * the payload is read) should be thrown instead.
	 */
	public ArtemisPacketException getException() {
		return exception;
	}
	
	/**
	 * Sets the exception that occurred during the parsing of this packet. This
	 * is only for non-fatal exceptions. A fatal exception (one occurring before
	 * the payload can be read) should be thrown instead.
	 */
	void setException(ArtemisPacketException ex) {
		exception = ex;
	}

	/**
	 * Convenience method for isInterestingPacket() || isInterestingObject().
	 */
	public boolean isInteresting() {
		return !(interestedPacketListeners.isEmpty() && interestedObjectListeners.isEmpty());
	}

	/**
	 * Returns true if the packet was of interest to any listeners. Note that in
	 * the case of an ObjectUpdatePacket, there may be listeners that aren't
	 * interested in the packet itself, but are interested in certain types of
	 * objects the packet may contain. Thus, it's entirely possible for
	 * isInterestingPacket() to return false while isContainsInterestingObject()
	 * returns true.
	 */
	public boolean isInterestingPacket() {
		return !interestedPacketListeners.isEmpty();
	}

	/**
	 * Returns true if the packet is an ObjectUpdatePacket and it contains an
	 * object of interest to one or more listeners.
	 */
	public boolean hasInterestingObject() {
		return !interestedObjectListeners.isEmpty();
	}

	/**
	 * Fire the listeners that were interested in this packet or its contents.
	 */
	public void fireListeners() {
		for (ListenerMethod method: interestedPacketListeners) {
			method.offer(getPacket());
		}

		if (packet instanceof ObjectUpdatePacket) {
			ObjectUpdatePacket ouPacket = (ObjectUpdatePacket) packet;

			for (ArtemisObject obj: ouPacket.getObjects()) {
				for (ListenerMethod method: interestedObjectListeners) {
					method.offer(obj);
				}
			}
		}
	}
}
